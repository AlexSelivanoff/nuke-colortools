set cut_paste_input [stack 0]
push $cut_paste_input
Group {
 name ChromaticAdaptationMatrix
 tile_color 0xf9eddaff
 addUserKnob {20 ChromaticAdaptationMatrix_tab l "Chromatic Adaptation Matrix"}
 addUserKnob {35 src_wp_presets l preset t "Source whitepoint" M {"whitepoint/A - 2856k - Incandescent / Tungsten" "knobs this \{src_xy \{0.44757 0.40745\} src_wp_name \"A\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/B - 4874k - \{obsolete\} Direct sunlight at noon" "knobs this \{src_xy \{0.34842 0.35161\} src_wp_name \"B\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/C - 6774k - \{obsolete\} Average / North sky Daylight" "knobs this \{src_xy \{0.31006 0.31616\} src_wp_name \"C\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D50 - 5003k - Horizon Light. ICC profile PCS" "knobs this \{src_xy \{0.34567 0.35850\} src_wp_name \"D50\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D55 - 5503k - Mid-morning / Mid-afternoon Daylight" "knobs this \{src_xy \{0.33242 0.34743\} src_wp_name \"D55\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" whitepoint/D60 "knobs this \{src_xy \{0.3216300 0.3377400\} src_wp_name \"D60\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" whitepoint/D60.ACES "knobs this \{src_xy \{0.3216800 0.3376700\} src_wp_name \"D60\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D65 - 6504k - Noon Daylight: Television, sRGB color space" "knobs this \{src_xy \{0.31271 0.32902\} src_wp_name \"D65\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D75 - 7504k - North sky Daylight" "knobs this \{src_xy \{0.29902 0.31485\} src_wp_name \"D75\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/E - 5454k - Equal energy" "knobs this \{src_xy \{0.33333 0.33333\} src_wp_name \"E\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F1 - 6430k - Daylight Fluorescent" "knobs this \{src_xy \{0.31310 0.33727\} src_wp_name \"F1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F2 - 4230k - Cool White Fluorescent" "knobs this \{src_xy \{0.37208 0.37529\} src_wp_name \"F2\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F3 - 3450k - White Fluorescent" "knobs this \{src_xy \{0.40910 0.39430\} src_wp_name \"F3\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F4 - 2940k - Warm White Fluorescent" "knobs this \{src_xy \{0.44018 0.40329\} src_wp_name \"F4\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F5 - 6350k - Daylight Fluorescent" "knobs this \{src_xy \{0.31379 0.34531\} src_wp_name \"F5\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F6 - 4150k - Lite White Fluorescent" "knobs this \{src_xy \{0.37790 0.38835\} src_wp_name \"F6\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F7 - 6500k - D65 simulator, Daylight simulator" "knobs this \{src_xy \{0.31292 0.32933\} src_wp_name \"F7\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F8 - 5000k - D50 simulator, Sylvania F40 Design 50" "knobs this \{src_xy \{0.34588 0.35875\} src_wp_name \"F8\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F9 - 4150k - Cool White Deluxe Fluorescent" "knobs this \{src_xy \{0.37417 0.37281\} src_wp_name \"F9\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F10 - 5000k - Philips TL85, Ultralume 50" "knobs this \{src_xy \{0.34609 0.35986\} src_wp_name \"F10\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F11 - 4000k - Philips TL84, Ultralume 40" "knobs this \{src_xy \{0.38052 0.37713\} src_wp_name \"F11\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F12 - 3000k - Philips TL83, Ultralume 30" "knobs this \{src_xy \{0.43695 0.40441\} src_wp_name \"F12\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B1 - 2733k - phosphor-converted blue" "knobs this \{src_xy \{0.45600 0.40780\} src_wp_name \"LED-B1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B2 - 2998k - phosphor-converted blue" "knobs this \{src_xy \{0.43570 0.40120\} src_wp_name \"LED-B2\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B3 - 4103k - phosphor-converted blue" "knobs this \{src_xy \{0.37560 0.37230\} src_wp_name \"LED-B3\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B4 - 5109k - phosphor-converted blue" "knobs this \{src_xy \{0.34220 0.35020\} src_wp_name \"LED-B4\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B5 - 6598k - phosphor-converted blue" "knobs this \{src_xy \{0.31180 0.32360\} src_wp_name \"LED-B5\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-BH1 - 2851k - mixing of phosphor-converted blue LED and red LED (blue-hybrid)" "knobs this \{src_xy \{0.44740 0.40660\} src_wp_name \"LED-BH1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-RGB1 - 2840k - mixing of red, green, and blue LEDs" "knobs this \{src_xy \{0.45570 0.42110\} src_wp_name \"LED-RGB1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-V1 - 2724k - phosphor-converted violet" "knobs this \{src_xy \{0.45600 0.45480\} src_wp_name \"LED-V1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-V2 - 4070k - phosphor-converted violet" "knobs this \{src_xy \{0.37810 0.37750\} src_wp_name \"LED-V2\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()"}}
 addUserKnob {35 dst_wp_presets l "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preset" t "Destination Whitepoint" -STARTLINE M {"whitepoint/A - 2856k - Incandescent / Tungsten" "knobs this \{dst_xy \{0.44757 0.40745\} dst_wp_name \"A\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/B - 4874k - \{obsolete\} Direct sunlight at noon" "knobs this \{dst_xy \{0.34842 0.35161\} dst_wp_name \"B\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/C - 6774k - \{obsolete\} Average / North sky Daylight" "knobs this \{dst_xy \{0.31006 0.31616\} dst_wp_name \"C\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D50 - 5003k - Horizon Light. ICC profile PCS" "knobs this \{dst_xy \{0.34567 0.35850\} dst_wp_name \"D50\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D55 - 5503k - Mid-morning / Mid-afternoon Daylight" "knobs this \{dst_xy \{0.33242 0.34743\} dst_wp_name \"D55\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" whitepoint/D60 "knobs this \{dst_xy \{0.3216300 0.3377400\} dst_wp_name \"D60\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" whitepoint/D60.ACES "knobs this \{dst_xy \{0.3216800 0.3376700\} dst_wp_name \"D60\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D65 - 6504k - Noon Daylight: Television, sRGB color space" "knobs this \{dst_xy \{0.31271 0.32902\} dst_wp_name \"D65\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/D75 - 7504k - North sky Daylight" "knobs this \{dst_xy \{0.29902 0.31485\} dst_wp_name \"D75\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/E - 5454k - Equal energy" "knobs this \{dst_xy \{0.33333 0.33333\} dst_wp_name \"E\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F1 - 6430k - Daylight Fluorescent" "knobs this \{dst_xy \{0.31310 0.33727\} dst_wp_name \"F1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F2 - 4230k - Cool White Fluorescent" "knobs this \{dst_xy \{0.37208 0.37529\} dst_wp_name \"F2\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F3 - 3450k - White Fluorescent" "knobs this \{dst_xy \{0.40910 0.39430\} dst_wp_name \"F3\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F4 - 2940k - Warm White Fluorescent" "knobs this \{dst_xy \{0.44018 0.40329\} dst_wp_name \"F4\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F5 - 6350k - Daylight Fluorescent" "knobs this \{dst_xy \{0.31379 0.34531\} dst_wp_name \"F5\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F6 - 4150k - Lite White Fluorescent" "knobs this \{dst_xy \{0.37790 0.38835\} dst_wp_name \"F6\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F7 - 6500k - D65 simulator, Daylight simulator" "knobs this \{dst_xy \{0.31292 0.32933\} dst_wp_name \"F7\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F8 - 5000k - D50 simulator, Sylvania F40 Design 50" "knobs this \{dst_xy \{0.34588 0.35875\} dst_wp_name \"F8\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F9 - 4150k - Cool White Deluxe Fluorescent" "knobs this \{dst_xy \{0.37417 0.37281\} dst_wp_name \"F9\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F10 - 5000k - Philips TL85, Ultralume 50" "knobs this \{dst_xy \{0.34609 0.35986\} dst_wp_name \"F10\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F11 - 4000k - Philips TL84, Ultralume 40" "knobs this \{dst_xy \{0.38052 0.37713\} dst_wp_name \"F11\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/F12 - 3000k - Philips TL83, Ultralume 30" "knobs this \{dst_xy \{0.43695 0.40441\} dst_wp_name \"F12\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B1 - 2733k - phosphor-converted blue" "knobs this \{dst_xy \{0.45600 0.40780\} dst_wp_name \"LED-B1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B2 - 2998k - phosphor-converted blue" "knobs this \{dst_xy \{0.43570 0.40120\} dst_wp_name \"LED-B2\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B3 - 4103k - phosphor-converted blue" "knobs this \{dst_xy \{0.37560 0.37230\} dst_wp_name \"LED-B3\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B4 - 5109k - phosphor-converted blue" "knobs this \{dst_xy \{0.34220 0.35020\} dst_wp_name \"LED-B4\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-B5 - 6598k - phosphor-converted blue" "knobs this \{dst_xy \{0.31180 0.32360\} dst_wp_name \"LED-B5\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-BH1 - 2851k - mixing of phosphor-converted blue LED and red LED (blue-hybrid)" "knobs this \{dst_xy \{0.44740 0.40660\} dst_wp_name \"LED-BH1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-RGB1 - 2840k - mixing of red, green, and blue LEDs" "knobs this \{dst_xy \{0.45570 0.42110\} dst_wp_name \"LED-RGB1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-V1 - 2724k - phosphor-converted violet" "knobs this \{dst_xy \{0.45600 0.45480\} dst_wp_name \"LED-V1\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()" "whitepoint/LED-V2 - 4070k - phosphor-converted violet" "knobs this \{dst_xy \{0.37810 0.37750\} dst_wp_name \"LED-V2\"\}; python -exec nuke.thisNode().knob('calculate_matrix').execute()"}}
 addUserKnob {26 colorspace_chromaticities_label l " " T "<b>SRC Whitepoint &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DST Whitepoint</b>"}
 addUserKnob {12 src_xy l " " t "Whitepoint xy chromaticity coordinates in CIE 1931 colorspace."}
 src_xy {0.32168 0.33767}
 addUserKnob {12 dst_xy l "" t "Destination whitepoint" -STARTLINE}
 dst_xy {0.31271 0.32902}
 addUserKnob {1 src_wp_name l src +DISABLED}
 src_wp_name D60
 addUserKnob {1 dst_wp_name l dst -STARTLINE +DISABLED}
 dst_wp_name D65
 addUserKnob {4 method t "Choose the cone response matrix type." M {Bradford cat02 "vonKries Hunt-Pointer-Estevez D65-Normalized" cmccat2000 sharp None}}
 addUserKnob {26 ""}
 addUserKnob {6 invert t "Invert direction of matrix: XYZtoRGB" +STARTLINE}
 addUserKnob {22 calculate_matrix l "Calculate Matrix" t "Calculate 3x3 matrix based on the specified colorspace chromaticities." T "import nuke\nfloat2 = nuke.math.Vector2\nfloat3 = nuke.math.Vector3\nfloat3x3 = nuke.math.Matrix3\n\nCONE_RESP_MAT_BRADFORD = float3x3()\nCONE_RESP_MAT_CAT02 = float3x3()\nCONE_RESP_MAT_VONKRIES = float3x3()\nCONE_RESP_MAT_SHARP = float3x3()\nCONE_RESP_MAT_CMCCAT2000 = float3x3()\n\n# From ACESlib.Utilities_Color : 166\nCONE_RESP_MAT_BRADFORD.set(0.89510, -0.75020,  0.03890, 0.26640,  1.71350, -0.06850, -0.16140,  0.03670,  1.02960)\nCONE_RESP_MAT_CAT02.set(0.73280, -0.70360,  0.00300, 0.42960,  1.69750,  0.01360, -0.16240, 0.00610, 0.98340)\n\n# https://web.stanford.edu/~sujason/ColorBalancing/adaptation.html\n# from S. Bianco. \"Two New von Kries Based Chromatic Adapatation Transforms Found by Numerical Optimization.\"\nCONE_RESP_MAT_VONKRIES.set(0.40024, -0.2263, 0, 0.7076, 1.16532, 0, -0.08081, 0.0457, 0.91822)\nCONE_RESP_MAT_SHARP.set(1.2694, -0.8364, 0.0297, -0.0988, 1.8006, -0.0315, -0.1706, 0.0357, 1.0018)\nCONE_RESP_MAT_CMCCAT2000.set(0.7982, -0.5918, 0.0008, 0.3389, 1.5512, 0.239, -0.1371, 0.0406, 0.9753)\n\n\n\ndef mult_f3_f33(src, mtx):\n    return float3(mtx\[0] * src\[0] + mtx\[1] * src\[1] + \n    mtx\[2] * src\[2], mtx\[3] * src\[0] + mtx\[4] * src\[1] + \n    mtx\[5] * src\[2], mtx\[6] * src\[0] + mtx\[7] * src\[1] + \n    mtx\[8] * src\[2])\n\ndef XYZ_2_xyY(XYZ):\n    xyY = float3()\n    divisor = (XYZ\[0] + XYZ\[1] + XYZ\[2])\n    if (divisor == 0.):\n        divisor = 1e-10\n    xyY.set(XYZ\[0] / divisor, XYZ\[1] / divisor, XYZ\[1])\n    return xyY\n\ndef xyY_2_XYZ(xyY):\n    XYZ = float3()\n    XYZ.set(\n        xyY\[0] * xyY\[2] / max( xyY\[1], 1e-10), \\\n        xyY\[2], \\\n        (1.0 - xyY\[0] - xyY\[1]) * xyY\[2] / max( xyY\[1], 1e-10)\n        )\n    return XYZ\n\n\ndef calculate_cat_matrix(src_xy, des_xy, coneRespMat=CONE_RESP_MAT_BRADFORD):\n    # Calculates and returns a 3x3 Von Kries chromatic adaptation transform \n    # from src_xy to des_xy using the cone response primaries defined \n    # by coneRespMat. By default, coneRespMat is set to CONE_RESP_MAT_BRADFORD. \n    # The default coneRespMat can be overridden at runtime. \n\n    src_xyY = float3(src_xy\[0], src_xy\[1], 1.0)\n    des_xyY = float3(des_xy\[0], des_xy\[1], 1.0)\n\n    src_XYZ = xyY_2_XYZ( src_xyY )\n    des_XYZ = xyY_2_XYZ( des_xyY )\n\n    src_coneResp = mult_f3_f33(src_XYZ, coneRespMat)\n    des_coneResp = mult_f3_f33(des_XYZ, coneRespMat)\n\n    vkMat = float3x3()\n    vkMat.set(\n        des_coneResp\[0] / src_coneResp\[0], 0.0, 0.0,\n        0.0, des_coneResp\[1] / src_coneResp\[1], 0.0,\n        0.0, 0.0, des_coneResp\[2] / src_coneResp\[2]\n        )\n\n    cat_matrix = float3x3()\n    coneRespMatInv = coneRespMat.inverse()\n    cat_matrix = coneRespMat * ( vkMat * coneRespMatInv)\n    \n    return cat_matrix\n\n\n\ndef start():\n    node = nuke.thisNode()\n    \n    invert = node\['invert'].getValue()\n    cat_method = node\['method'].value()\n    src_xy = float2(node\['src_xy'].getValue()\[0], node\['src_xy'].getValue()\[1])\n    dst_xy = float2(node\['dst_xy'].getValue()\[0], node\['dst_xy'].getValue()\[1])\n\n    # Get chromatic adaptation method\n    if cat_method == 'Bradford':\n        coneRespMat = CONE_RESP_MAT_BRADFORD\n    elif cat_method == 'cat02':\n        coneRespMat = CONE_RESP_MAT_CAT02\n    elif cat_method == 'vonKries Hunt-Pointer-Estevez D65-Normalized':\n        coneRespMat = CONE_RESP_MAT_VONKRIES\n    elif cat_method == 'cmccat2000':\n        coneRespMat = CONE_RESP_MAT_CMCCAT2000\n    elif cat_method == 'sharp':\n        coneRespMat = CONE_RESP_MAT_SHARP\n    elif cat_method == 'None':\n        coneRespMat = float3x3()\n        coneRespMat.makeIdentity()\n\n    mtx = calculate_cat_matrix(src_xy, dst_xy, coneRespMat=coneRespMat)\n\n    if invert:\n        mtx = mtx.inverse()\n\n    node\['matrix'].setValue(mtx)\n\n    node\['label'].setValue('CAT: \{0\}\\n \{1\} to \{2\}'.format(node\['method'].value(), node\['src_wp_name'].getValue(), node\['dst_wp_name'].getValue()))\n\nif __name__=='__main__':\n    start()\n\n\n\n\n\n\n# References for different xyY whitepoints of different Standard Illuminants\n# http://brucelindbloom.com/index.html?Eqn_ChromAdapt.html\n# https://www.mathworks.com/help/images/ref/whitepoint.html\n# https://rdrr.io/cran/spacesXYZ/man/standardXYZ.html\n# https://en.wikipedia.org/wiki/Standard_illuminant\n\n# XYZ \n# A   1.09850 1.00000 0.35585     Simulates typical, domestic, tungsten-filament lighting with correlated color temperature of 2856 K. \n# B   0.99072 1.00000 0.85223     Simulates average or north sky daylight with correlated color temperature of 6774 K. Deprecated by CIE.\n# C   0.98074 1.00000 1.18232     Useful as a theoretical reference.\n# D50 0.96422 1.00000 0.82521     Simulates warm daylight at sunrise or sunset with correlated color temperature of 5003 K. Also known as horizon light.\n# D55 0.95682 1.00000 0.92149     Simulates mid-morning or mid-afternoon daylight with correlated color temperature of 5500 K.  \n# D60 0.95230 1.00000 1.00859     \n# D65 0.95047 1.00000 1.08883     Simulates noon daylight with correlated color temperature of 6504 K. \n# D75 0.94972 1.00000 1.22638\n# E   1.00000 1.00000 1.00000\n# F2  0.99186 1.00000 0.67393\n# F7  0.95041 1.00000 1.08747\n# F11 1.00962 1.00000 0.64350\n\n\n# xy\n# name        CIE 1931 2deg         kelvin (cct)\n# A           0.44757 0.40745     2856            Incandescent / Tungsten\n# B           0.34842 0.35161     4874            \{obsolete\} Direct sunlight at noon\n# C           0.31006 0.31616     6774            \{obsolete\} Average / North sky Daylight\n# D50         0.34567 0.35850     5003            Horizon Light. ICC profile PCS\n# D55         0.33242 0.34743     5503            Mid-morning / Mid-afternoon Daylight\n# D60         0.32163 0.33774\n# D60.ACES    0.32168 0.33767\n# D65         0.31271 0.32902     6504            Noon Daylight: Television, sRGB color space\n# D75         0.29902 0.31485     7504            North sky Daylight\n# E           1/3 1/3 1/3 1/3     5454            Equal energy\n# F1          0.31310 0.33727     6430            Daylight Fluorescent\n# F2          0.37208 0.37529     4230            Cool White Fluorescent\n# F3          0.40910 0.39430     3450            White Fluorescent\n# F4          0.44018 0.40329     2940            Warm White Fluorescent\n# F5          0.31379 0.34531     6350            Daylight Fluorescent\n# F6          0.37790 0.38835     4150            Lite White Fluorescent\n# F7          0.31292 0.32933     6500            D65 simulator, Daylight simulator\n# F8          0.34588 0.35875     5000            D50 simulator, Sylvania F40 Design 50\n# F9          0.37417 0.37281     4150            Cool White Deluxe Fluorescent\n# F10         0.34609 0.35986     5000            Philips TL85, Ultralume 50\n# F11         0.38052 0.37713     4000            Philips TL84, Ultralume 40\n# F12         0.43695 0.40441     3000            Philips TL83, Ultralume 30\n# LED-B1      0.4560  0.4078      2733            phosphor-converted blue\n# LED-B2      0.4357  0.4012      2998            phosphor-converted blue\n# LED-B3      0.3756  0.3723      4103            phosphor-converted blue\n# LED-B4      0.3422  0.3502      5109            phosphor-converted blue\n# LED-B5      0.3118  0.3236      6598            phosphor-converted blue\n# LED-BH1     0.4474  0.4066      2851            mixing of phosphor-converted blue LED and red LED (blue-hybrid)\n# LED-RGB1    0.4557  0.4211      2840            mixing of red, green, and blue LEDs\n# LED-V1      0.4560  0.4548      2724            phosphor-converted violet\n# LED-V2      0.3781  0.3775      4070            phosphor-converted violet" +STARTLINE}
 addUserKnob {22 create_matrix_node l "Create Matrix" t "Create ColorMatrix node with the current values." -STARTLINE T "node = nuke.thisNode()\nnode\['calculate_matrix'].execute()\nnuke.root().begin()\n_ = \[n.setSelected(False) for n in nuke.allNodes(recurseGroups=True)]\nm = nuke.createNode('ColorMatrix')\nm\['matrix'].setValue(node\['matrix'].getValue())\nm.setXYpos(node.xpos()-120, node.ypos())\nm\['label'].setValue(node\['label'].getValue())"}
 addUserKnob {41 matrix T ColorMatrix.matrix}
 addUserKnob {22 clear l Clear T "n = nuke.thisNode()\nn\['matrix'].setValue(\[1,0,0,0,1,0,0,0,1])\nn\['label'].setValue('')" +STARTLINE}
}
 Input {
  inputs 0
  name Input
  xpos -40
  ypos 206
 }
 ColorMatrix {
  matrix {
      {1 0 0}
      {0 1 0}
      {0 0 1}
    }
  name ColorMatrix
  xpos -40
  ypos 254
 }
 Output {
  name Output
  xpos -40
  ypos 302
 }
end_group
