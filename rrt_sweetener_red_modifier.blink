kernel ACES_rrt_sweeteners : public ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> src;
  Image<eWrite> dst;

param:
  // User controllable parameters
  float RRT_RED_SCALE;
  float RRT_RED_PIVOT;
  float RRT_RED_HUE;
  float RRT_RED_WIDTH;
  bool invert;

  // // Red modifier constants
  // RRT_RED_SCALE = 0.82;
  // RRT_RED_PIVOT = 0.03;
  // RRT_RED_HUE = 0.;
  // RRT_RED_WIDTH = 135.;


  float min_f3(float3 a) {
    return min( a.x, min( a.y, a.z));
  }

  float max_f3(float3 a) {
    return max( a.x, max( a.y, a.z));
  }

  float rgb_2_saturation( float3 rgb ) {
    return ( max( max_f3(rgb), 1e-10) - max( min_f3(rgb), 1e-10)) / max( max_f3(rgb), 1e-2);
  }

  float sigmoid_shaper( float x) {
    float t = max( float(1. - fabs( float(x / 2.))), float(0));
    float y = 1. + sign(float(x)) * (1. - t * t);
    return y / 2.;
  }

  float rgb_2_yc( float3 rgb, float ycRadiusWeight) {
    // keyword arguments don't work with blink.. ycRadiusWeight default if not specified was 1.75
    float r = rgb.x; 
    float g = rgb.y; 
    float b = rgb.z;
    float chroma = sqrt(float(b*(b-g)+g*(g-r)+r*(r-b)));
    return ( b + g + r + ycRadiusWeight * chroma) / 3.;
  }

  // ------- Glow module functions
  float glow_fwd( float ycIn, float glowGainIn, float glowMid) {
     float glowGainOut;
     if (ycIn <= 2./3. * glowMid) {
       glowGainOut = glowGainIn;
     } else if ( ycIn >= 2. * glowMid) {
       glowGainOut = 0.;
     } else {
       glowGainOut = glowGainIn * (glowMid / ycIn - 1./2.);
     }
     return glowGainOut;
  }

  // Transformations from RGB to other color representations
  float rgb_2_hue( float3 rgb) 
  {
    // Returns a geometric hue angle in degrees (0-360) based on RGB values.
    // For neutral colors, hue is undefined and the function will return a quiet NaN value.
    float hue;
    if (rgb.x == rgb.y && rgb.y == rgb.z) {
      hue = 0.; // RGB triplets where RGB are equal have an undefined hue
    } else {
      hue = (180./3.14159265359) * atan2( sqrt(3)*(rgb.y-rgb.z), 2*rgb.x-rgb.y-rgb.z);
    }
    if (hue < 0.) hue = hue + 360.;
    return hue;
  }

  float center_hue( float hue, float centerH) {
    float hueCentered = hue - centerH;
    if (hueCentered < -180.) hueCentered = hueCentered + 360.;
    else if (hueCentered > 180.) hueCentered = hueCentered - 360.;
    return hueCentered;
  }

  float cubic_basis_shaper( float x, float w) {
    float M[4][4] = { { -1./6,  3./6, -3./6,  1./6 },
                      {  3./6, -6./6,  3./6,  0./6 },
                      { -3./6,  0./6,  3./6,  0./6 },
                      {  1./6,  4./6,  1./6,  0./6 } };
    
    double knots[5] = { -w/2.,
                       -w/4.,
                       0.,
                       w/4.,
                       w/2. };
    float y = 0;
    if ((x > knots[0]) && (x < knots[4])) {  
      float knot_coord = (x - knots[0]) * 4./w;  
      int j = knot_coord;
      float t = knot_coord - j;
      float monomials[4] = { t*t*t, t*t, t, 1. };
      // (if/else structure required for compatibility with CTL < v1.5.)
      if ( j == 3) {
        y = monomials[0] * M[0][0] + monomials[1] * M[1][0] + 
            monomials[2] * M[2][0] + monomials[3] * M[3][0];
      } else if ( j == 2) {
        y = monomials[0] * M[0][1] + monomials[1] * M[1][1] + 
            monomials[2] * M[2][1] + monomials[3] * M[3][1];
      } else if ( j == 1) {
        y = monomials[0] * M[0][2] + monomials[1] * M[1][2] + 
            monomials[2] * M[2][2] + monomials[3] * M[3][2];
      } else if ( j == 0) {
        y = monomials[0] * M[0][3] + monomials[1] * M[1][3] + 
            monomials[2] * M[2][3] + monomials[3] * M[3][3];
      } else {
        y = 0.0;
      }
    }
    return y * 3/2.;
  }


  void process() {
    float3 aces = float3(src().x, src().y, src().z);
    float saturation = rgb_2_saturation(aces);

    // --- Red modifier --- //
    float hue = rgb_2_hue( aces);
    float centeredHue = center_hue( hue, RRT_RED_HUE);
    float hueWeight = cubic_basis_shaper( centeredHue, RRT_RED_WIDTH);
    aces.x = aces.x + hueWeight * saturation * (RRT_RED_PIVOT - aces.x) * (1. - RRT_RED_SCALE);

    dst() = float4(aces.x, aces.y, aces.z, src().w);
  }
};