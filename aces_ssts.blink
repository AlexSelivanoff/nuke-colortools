kernel AcesSSTSKernel : public ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> src;
  Image<eWrite> dst;

param:
  // User controllable parameters
  float3 disp_lum;
  bool override_curve_params;
  float knee;
  float shoulder;
  float3 slope;
  float exposure;
  bool invert;

local:
  float MIN_STOP_SDR;
  float MAX_STOP_SDR;
  float MIN_STOP_RRT;
  float MAX_STOP_RRT;
  float MIN_LUM_SDR;
  float MAX_LUM_SDR;
  float MIN_LUM_RRT;
  float MAX_LUM_RRT;
  float3 Min;
  float3 Mid;
  float3 Max;
  float expShift;
  float coefsLow[5];
  float coefsHigh[5];
  int N_KNOTS_LOW;
  int N_KNOTS_HIGH;
  float3x3 M1;

  // -------------------------------------------------------
  // Utility Functions
  // -------------------------------------------------------

  // 1D interpolate: return y value at some point p in x
  // This function differs from the interpolate1D CTL implementation.
  // It is limited to 2 float2 vectors, x and y
  // given a position p between x.x and x.y, it returns an interpolated
  // value between y.x and y.y
  // CTL_table[2][2] = { { A, B }, { C, D } };
  // = 
  // float2 x = float2(A, C)
  // float2 y = float2(B, D)
  float interpolate1D(float2 x, float2 y, float p) {
    if (p <= x.x) {
      return y.x;
    } else if (p >= x.y) {
      return y.y;
    } else {
      float slope = (y.y-y.x) / (x.y-x.x);
      return y.x + slope * (p-x.x);
    }
  }

  // multiply a float3 by a matrix3x3
  float3 mult_f3_f33( float3 src, float3x3 mtx) {
    return float3(mtx[0][0] * src.x + mtx[0][1] * src.y + 
    mtx[0][2] * src.z, mtx[1][0] * src.x + mtx[1][1] * src.y + 
    mtx[1][2] * src.z, mtx[2][0] * src.x + mtx[2][1] * src.y + 
    mtx[2][2] * src.z);
  }

  // dot product of two 1x3 matrices
  float dot_f3_f3( float3 A, float3 B) {
    return (A.x*B.x)+(A.y*B.y)+(A.z*B.z);
  }

  // Return interpolated minimum ACES value given a minimum luminance value.
  float lookup_ACESmin( float minLum ) {
    float2 rangeLum = float2(log10(float(MIN_LUM_RRT)), log10(float(MIN_LUM_SDR)));
    float2 rangeStops = float2(MIN_STOP_RRT, MIN_STOP_SDR);
    return 0.18*pow( float(2), float(interpolate1D( rangeLum, rangeStops, log10( float(minLum)))));
  }
  // Return interpolated maximum ACES value given a maximum luminance value.
  float lookup_ACESmax( float maxLum ) {
    float2 rangeLum = float2(log10(float(MAX_LUM_SDR)), log10(float(MAX_LUM_RRT)));
    float2 rangeStops = float2(MAX_STOP_SDR, MAX_STOP_RRT);
    return 0.18*pow( float(2), float(interpolate1D( rangeLum, rangeStops, log10( float(maxLum)))));
  }

  void init_coefsLow( float3 TsPointLow, float3 TsPointMid ) {
    // :145 float cLow[5] = init_coefsLow( MIN_PT, MID_PT);
    float knotIncLow = (log10(TsPointMid.x) - log10(TsPointLow.x)) / 3.0;
    // DeterTsPointLowe two lowest coefficients (straddling TsPointLowPt)
    coefsLow[0] = (TsPointLow.z * (log10(float(TsPointLow.x))-0.5*knotIncLow)) + ( log10(float(TsPointLow.y)) - TsPointLow.z * log10(float(TsPointLow.x)));
    coefsLow[1] = (TsPointLow.z * (log10(float(TsPointLow.x))+0.5*knotIncLow)) + ( log10(float(TsPointLow.y)) - TsPointLow.z * log10(float(TsPointLow.x)));
    // DeterTsPointLowe two highest coefficients (straddling TsPointMidPt)
    coefsLow[3] = (TsPointMid.z * (log10(float(TsPointMid.x))-0.5*knotIncLow)) + ( log10(float(TsPointMid.y)) - TsPointMid.z * log10(float(TsPointMid.x)));
    coefsLow[4] = (TsPointMid.z * (log10(float(TsPointMid.x))+0.5*knotIncLow)) + ( log10(float(TsPointMid.y)) - TsPointMid.z * log10(float(TsPointMid.x)));
    // TsPointMiddle coefficient (which defines the "sharpness of the bend") is linearly interpolated
    float2 bendsLowA = float2(MIN_STOP_RRT, MIN_STOP_SDR);
    float2 bendsLowB = float2(0.18, 0.35);
    float pctLow;
    if (override_curve_params == 1) {
      pctLow = knee;
    }
    else {
      pctLow = interpolate1D(bendsLowA, bendsLowB, log2(float(TsPointLow.x/0.18)));
    }
    coefsLow[2] = log10(float(TsPointLow.y)) + pctLow*(log10(float(TsPointMid.y))-log10(float(TsPointLow.y)));
  }

  void init_coefsHigh( float3 TsPointMid, float3 TsPointMax ) {
    // :146 float cHigh[5] = init_coefsHigh( MID_PT, MAX_PT);
    float knotIncHigh = (log10(TsPointMax.x) - log10(TsPointMid.x)) / 3.;
    // DeterMine two lowest coefficients (straddling MidPt)
    coefsHigh[0] = (TsPointMid.z * (log10(float(TsPointMid.x))-0.5*knotIncHigh)) + ( log10(float(TsPointMid.y)) - TsPointMid.z * log10(float(TsPointMid.x)));
    coefsHigh[1] = (TsPointMid.z * (log10(float(TsPointMid.x))+0.5*knotIncHigh)) + ( log10(float(TsPointMid.y)) - TsPointMid.z * log10(float(TsPointMid.x)));
    // DeterMide two highest coefficients (straddling TsPointMaxPt)
    coefsHigh[3] = (TsPointMax.z * (log10(float(TsPointMax.x))-0.5*knotIncHigh)) + ( log10(float(TsPointMax.y)) - TsPointMax.z * log10(float(TsPointMax.x)));
    coefsHigh[4] = (TsPointMax.z * (log10(float(TsPointMax.x))+0.5*knotIncHigh)) + ( log10(float(TsPointMax.y)) - TsPointMax.z * log10(float(TsPointMax.x)));
    // Middle coefficient (which defines the "sharpness of the bend") is linearly interpolated
    float2 bendsHighA = float2(MAX_STOP_SDR, MAX_STOP_RRT);
    float2 bendsHighB = float2(0.89, 0.90);
    float pctHigh;
    if (override_curve_params == 1) {
      pctHigh = shoulder;
    }
    else {
      pctHigh = interpolate1D(bendsHighA, bendsHighB, log2(float(TsPointMax.x/0.18)));
    }
    coefsHigh[2] = log10(float(TsPointMid.y)) + pctHigh*(log10(float(TsPointMax.y))-log10(float(TsPointMid.y)));
  }

  float shift( float in, float expShift) {
    return pow(float(2), (log2(float(in)) - expShift));
  }

  void init_TsParams( float minLum, float maxLum, float exp_shift ) {
    // ACESlib.SSTS.ctl :136 init_TsParams 
    // Min Mid and Max is a float3 :
    // x = lum (aces), y = lum (cd/m^2), z = slope

    // override slope with default values used in AMPAS CTL
    if (override_curve_params == 1) {
      Min = float3(lookup_ACESmin(minLum), minLum, float(slope.x));
      Mid = float3(0.18, 4.8, float(slope.y));
      Max = float3(lookup_ACESmax(maxLum), maxLum, float(slope.z));   
    }
    else {
      Min = float3(lookup_ACESmin(minLum), minLum, float(0.0));
      Mid = float3(0.18, 4.8, float(1.55));
      Max = float3(lookup_ACESmax(maxLum), maxLum, float(0.0));
    }

    // init coefsLow and coefsHigh (directly sets local variables).
    init_coefsLow( Min, Mid );
    init_coefsHigh( Mid, Max );

    // :140 - init_TsParams : Exposure Shift
    Min.x = shift(lookup_ACESmin(minLum), exp_shift);
    Mid.x = shift(0.18, exp_shift);
    Max.x = shift(lookup_ACESmax(maxLum), exp_shift);

    // PARAMS = 
    // float3 Min / float3 Mid / float3 Max 
    // coefsLow[5]
    // coefsHigh[5]
  }

  void init() {
    // Textbook monomial to basis-function conversion matrix. (Used in tonescale)
    MIN_STOP_SDR = -6.5;
    MAX_STOP_SDR = 6.5;
    MIN_STOP_RRT = -15.;
    MAX_STOP_RRT = 18.;
    MIN_LUM_SDR = 0.02;
    MAX_LUM_SDR = 48.0;
    MIN_LUM_RRT = 0.0001;
    MAX_LUM_RRT = 10000.0;
    // Monomial to basis function
    float Marray[] = {0.5, -1.0, 0.5, 
                      -1.0, 1.0, 0.0, 
                      0.5, 0.5, 0.0};
    M1.setArray(Marray);

    N_KNOTS_LOW = 4;
    N_KNOTS_HIGH = 4;

    // Get min / max lum from user
    float Y_MIN = disp_lum.x;
    float Y_MID = disp_lum.y;
    float Y_MAX = disp_lum.z;


    init_TsParams( Y_MIN, Y_MAX, 0.0 );

    // Define expShift from inv_ssts
    expShift = (log2(inv_ssts(Y_MID)) - log2(0.18)) + exposure;

    // expShift = log2(inv_ssts(Y_MID)) - log2(0.18);

    init_TsParams( Y_MIN, Y_MAX, expShift );
  }


  // ACES Single Stage Tone Scale
  float ssts( float x ) {

    // Take the log: clamp min to HALF_MIN
    float logx = log10(max(x, 5.96046448e-08));
    float logy;

    // Calculate values for linear extension in shadows
    if (logx <= log10(float(Min.x))) {
      logy = logx * Min.z + (log10(float(Min.y))) - 
        Min.z * log10(float(Min.x));
    }
    // Calculate values for lower half of S-curve, shadows 
    else if (( logx > log10(float(Min.x)) ) && ( logx < log10(float(Mid.x)) )) {
      float knot_coord = (N_KNOTS_LOW-1) * (logx-log10(float(Min.x)))/
        (log10(float(Mid.x))-log10(float(Min.x)));
      int j = knot_coord;
      float t = knot_coord - j;
      float3 cf = float3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);
      float3 monomials = float3(t * t, t, 1.);
      logy = dot_f3_f3(monomials, mult_f3_f33(cf, M1));
    }
    // Calculate values for upper half of S-curve, highlights
    else if (( logx >= log10(float(Mid.x)) ) && ( logx < log10(float(Max.x)) )) {
      float knot_coord = (N_KNOTS_HIGH-1) * (logx-log10(float(Mid.x)))/
        (log10(float(Max.x))-log10(float(Mid.x)));
      int j = knot_coord;
      float t = knot_coord - j;
      float3 cf = float3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]); 
      float3 monomials = float3(t * t, t, 1.);
      logy = dot_f3_f3(monomials, mult_f3_f33(cf, M1));
    }
    // Calculate values for linear extension in highlights
    else { // if ( logx >= log10(float(Max.x)) ) {
      logy = logx * Max.z + ( log10(float(Max.y)) - Max.z * log10(float(Max.x)) );
    }
    // un-log
    return  pow(float(10),logy);
  }


  // ACES Inverse Single Stage Tone Scale
  float inv_ssts( float y ) {

    float KNOT_INC_LOW = (log10(float(Mid.x)) - log10(float(Min.x))) / (N_KNOTS_LOW - 1.);
    float KNOT_INC_HIGH = (log10(float(Max.x)) - log10(float(Mid.x))) / (N_KNOTS_HIGH - 1.);

    // KNOT_Y is luminance of the spline at each knot
    // Error 1: variable length arrays are not supported in OpenCL
    // float __KNOT_Y_LOW_38[N_KNOTS_LOW];
    // Setting array length to 4 manually as a workaround... :(
    float KNOT_Y_LOW[ 4];
    for (int i = 0; i < N_KNOTS_LOW; i = i+1) {
      KNOT_Y_LOW[ i] = ( coefsLow[i] + coefsLow[i+1]) / 2.;
    }
    // Setting array length to 4 manually as a workaround...
    float KNOT_Y_HIGH[ 4];
    for (int i = 0; i < N_KNOTS_HIGH; i = i+1) {
      KNOT_Y_HIGH[ i] = ( coefsHigh[i] + coefsHigh[i+1]) / 2.;
    };

    float logy = log10( max(y, 1e-10));
    float logx;

    if (logy <= log10(float(Min.y))) {
        logx = log10(float(Min.x));

    } else if ( (logy > log10(float(Min.y))) && (logy <= log10(float(Mid.y))) ) {
        int j;
        float3 cf;
        if ( logy > KNOT_Y_LOW[ 0] && logy <= KNOT_Y_LOW[ 1]) {
            cf.x = coefsLow[0];  cf.y = coefsLow[1];  cf.z = coefsLow[2];  j = 0;
        } else if ( logy > KNOT_Y_LOW[ 1] && logy <= KNOT_Y_LOW[ 2]) {
            cf.x = coefsLow[1];  cf.y = coefsLow[2];  cf.z = coefsLow[3];  j = 1;
        } else if ( logy > KNOT_Y_LOW[ 2] && logy <= KNOT_Y_LOW[ 3]) {
            cf.x = coefsLow[2];  cf.y = coefsLow[3];  cf.z = coefsLow[4];  j = 2;
        } 

        float3 tmp = mult_f3_f33( cf, M1);
        float a = tmp.x;
        float b = tmp.y;
        float c = tmp.z;
        c = c - logy;

        const float d = sqrt(float(b * b - 4. * a * c));

        const float t = ( 2. * c) / ( -d - b);

        logx = log10(float(Min.x)) + ( t + j) * KNOT_INC_LOW;

    } else if ( (logy > log10(float(Mid.y))) && (logy < log10(float(Max.y))) ) {
        int j;
        float3 cf;
        if ( logy >= KNOT_Y_HIGH[ 0] && logy <= KNOT_Y_HIGH[ 1]) {
            cf.x = coefsHigh[0];  cf.y = coefsHigh[1];  cf.z = coefsHigh[2];  j = 0;
        } else if ( logy > KNOT_Y_HIGH[ 1] && logy <= KNOT_Y_HIGH[ 2]) {
            cf.x = coefsHigh[1];  cf.y = coefsHigh[2];  cf.z = coefsHigh[3];  j = 1;
        } else if ( logy > KNOT_Y_HIGH[ 2] && logy <= KNOT_Y_HIGH[ 3]) {
            cf.x = coefsHigh[2];  cf.y = coefsHigh[3];  cf.z = coefsHigh[4];  j = 2;
        } 

        float3 tmp = mult_f3_f33( cf, M1);

        float a = tmp.x;
        float b = tmp.y;
        float c = tmp.z;
        c = c - logy;

        const float d = sqrt( float(b * b - 4. * a * c));

        const float t = ( 2. * c) / ( -d - b);

        logx = log10(float(Mid.x)) + ( t + j) * KNOT_INC_HIGH;

    } else { //if ( logy >= log10(float(Max.y)) ) {

        logx = log10(float(Max.x));

    }

    return pow(10, logx);

  }

  void process() {

    if (invert == 1 ) {
      dst() = float4(inv_ssts(src().x), inv_ssts(src().y), inv_ssts(src().z), src().w);
    }
    else {
      dst() = float4(ssts(src().x), ssts(src().y), ssts(src().z), src().w);
    }
  }
};