kernel ACES_segmented_spline_c5 : public ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessPoint, eEdgeClamped> src;
  Image<eWrite> dst;

param:
  // User controllable parameters
  bool invert;

local:
  float2 Min;
  float2 Mid;
  float2 Max;
  float slopeLow;
  float slopeHigh;
  float coefsLow[5];
  float coefsHigh[5];
  int N_KNOTS_LOW;
  int N_KNOTS_HIGH;

  float3x3 M;


  // multiply a float3 by a matrix3x3
  float3 mult_f3_f33( float3 src, float3x3 mtx) {
    return float3(mtx[0][0] * src.x + mtx[0][1] * src.y + 
    mtx[0][2] * src.z, mtx[1][0] * src.x + mtx[1][1] * src.y + 
    mtx[1][2] * src.z, mtx[2][0] * src.x + mtx[2][1] * src.y + 
    mtx[2][2] * src.z);
  }

  // dot product of two 1x3 matrices
  float dot_f3_f3( float3 A, float3 B) {
    return (A.x*B.x)+(A.y*B.y)+(A.z*B.z);
  }

  void init() {

    // Set up RRT_PARAMS
    coefsLow[0] = -4.0000000000;
    coefsLow[1] = -4.0000000000;
    coefsLow[2] = -3.1573765773;
    coefsLow[3] = -0.4852499958;
    coefsLow[4] = 1.8477324706;
    coefsLow[5] = 1.8477324706;

    coefsHigh[0] = -0.7185482425;
    coefsHigh[1] = 2.0810307172;
    coefsHigh[2] = 3.6681241237;
    coefsHigh[3] = 4.0000000000;
    coefsHigh[4] = 4.0000000000;
    coefsHigh[5] = 4.0000000000;

    // Nota bene: It seems as though if you define an int before an array, the int
    // could randomly get set to a really really high value :(
    N_KNOTS_LOW = 4;
    N_KNOTS_HIGH = 4;

    // Monomial to basis function (Note: this is transposed compared to the AMPAS CTL)
    float Marray[] = {0.5, -1.0, 0.5, 
                      -1.0, 1.0, 0.0, 
                      0.5, 0.5, 0.0};
    M.setArray(Marray);

    // Explicit casts to float are necessary for log10 calls in function to work :/
    Min = float2(float(0.18*pow(float(2), float(-15))), 0.0001);
    Mid = float2(0.18, 4.8);
    Max = float2(float(0.18*pow(float(2), float(18))), 10000);
    slopeLow = 0.0;
    slopeHigh = 0.0;


  }


  float segmented_spline_c5_fwd( float x ) {
    // Take the log: clamp min to HALF_MIN
    float logx = log10(max(x, 5.96046448e-08));
    float logy;

    if ( logx <= log10(Min.x) ) { 
      logy = logx * slopeLow + ( log10(Min.y) - slopeLow * log10(Min.x) );
    } 
    else if (( logx > log10(Min.x) ) && ( logx < log10(Mid.x) )) {
      float knot_coord = (N_KNOTS_LOW-1) * (logx-log10(Min.x))/(log10(Mid.x)-log10(Min.x));
      int j = knot_coord;
      float t = knot_coord - j;
      float3 cf = float3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);
      float3 monomials = float3(t * t, t, 1.0);
      logy = dot_f3_f3( monomials, mult_f3_f33( cf, M));
    } 
    else if (( logx >= log10(Mid.x) ) && ( logx < log10(Max.x) )) {
      float knot_coord = (N_KNOTS_HIGH-1) * (logx-log10(Mid.x))/(log10(Max.x)-log10(Mid.x));
      int j = knot_coord;
      float t = knot_coord - j;
      float3 cf = float3(coefsHigh[ j], coefsHigh[ j + 1], coefsHigh[ j + 2]);
      float3 monomials = float3(t * t, t, 1. );
      logy = dot_f3_f3( monomials, mult_f3_f33( cf, M));
    } 
    else { //if ( logIn >= log10(Max.x) ) { 
      logy = logx * slopeHigh + ( log10(Max.y) - slopeHigh * log10(Max.x) );
    }
    return pow(10, logy);
  }



  float segmented_spline_c5_rev( float y ) {  


    const float KNOT_INC_LOW = (log10(Mid.x) - log10(Min.x)) / (N_KNOTS_LOW - 1.);
    const float KNOT_INC_HIGH = (log10(Max.x) - log10(Mid.x)) / (N_KNOTS_HIGH - 1.);
    // return N_KNOTS_LOW;

    // Setting array length to 4 manually to work around 
    // Error 1: variable length arrays are not supported in OpenCL
    float4 KNOT_Y_LOW;
    for (int i = 0; i < N_KNOTS_LOW; i = i+1) {
      KNOT_Y_LOW[ i] = ( coefsLow[i] + coefsLow[i+1]) / 2.;
    };

    float4 KNOT_Y_HIGH;
    for (int i = 0; i < N_KNOTS_HIGH; i = i+1) {
      KNOT_Y_HIGH[ i] = ( coefsHigh[i] + coefsHigh[i+1]) / 2.;
    };

    float logy = log10( max(y, 1e-10));
    float logx;

    if (logy <= log10(Min.y)) {
      logx = log10(Min.x);
    } 
    else if ( (logy > log10(Min.y)) && (logy <= log10(Mid.y)) ) {
      int j;
      float3 cf;
      if ( logy > KNOT_Y_LOW.x && logy <= KNOT_Y_LOW.y) {
        cf.x = coefsLow[0];  cf.y = coefsLow[1];  cf.z = coefsLow[2];  j = 0;
      } else if ( logy > KNOT_Y_LOW.y && logy <= KNOT_Y_LOW.z) {
        cf.x = coefsLow[1];  cf.y = coefsLow[2];  cf.z = coefsLow[3];  j = 1;
      } else if ( logy > KNOT_Y_LOW.z && logy <= KNOT_Y_LOW.w ) {
        cf.x = coefsLow[2];  cf.y = coefsLow[3];  cf.z = coefsLow[4];  j = 2;
      }
      float3 tmp = mult_f3_f33( cf, M);
      float a = tmp.x;
      float b = tmp.y;
      float c = tmp.z;
      c = c - logy;
      float d = sqrt( float(b * b - 4. * a * c));
      float t = ( 2. * c) / ( -d - b);
      logx = log10(Min.x) + ( t + j) * KNOT_INC_LOW;
    }
    else if ( (logy > log10(Mid.y)) && (logy < log10(Max.y)) ) {
      int j;
      float3 cf;
      if ( logy > KNOT_Y_HIGH.x && logy <= KNOT_Y_HIGH.y) {
        cf.x = coefsHigh[0];  cf.y = coefsHigh[1];  cf.z = coefsHigh[2];  j = 0;
      } else if ( logy > KNOT_Y_HIGH.y && logy <= KNOT_Y_HIGH.z) {
        cf.x = coefsHigh[1];  cf.y = coefsHigh[2];  cf.z = coefsHigh[3];  j = 1;
      } else if ( logy > KNOT_Y_HIGH.z && logy <= KNOT_Y_HIGH.w) {
        cf.x = coefsHigh[2];  cf.y = coefsHigh[3];  cf.z = coefsHigh[4];  j = 2;
      }
      float3 tmp = mult_f3_f33( cf, M);
      float a = tmp.x;
      float b = tmp.y;
      float c = tmp.z;
      c = c - logy;
      float d = sqrt( float(b * b - 4. * a * c));
      float t = ( 2. * c) / ( -d - b);
      logx = log10(Mid.x) + ( t + j) * KNOT_INC_HIGH;
    }
    else { //if ( logy >= log10(Max.y) ) {
      logx = log10(Max.x);
    }
    
    return pow(10, logx);

  }

  void process() {
    float3 aces = float3(src().x, src().y, src().z);

    if (invert == 0) {
      aces = float3(segmented_spline_c5_fwd(aces.x), segmented_spline_c5_fwd(aces.y), segmented_spline_c5_fwd(aces.z));
    } else {
      aces = float3(segmented_spline_c5_rev(aces.x), segmented_spline_c5_rev(aces.y), segmented_spline_c5_rev(aces.z));
    }

    dst() = float4(aces.x, aces.y, aces.z, src().w);
    }
};