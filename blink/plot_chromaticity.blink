kernel PlotChromaticity : public ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessRandom, eEdgeClamped> col;
  Image<eRead, eAccessRandom, eEdgeClamped> Yxy;
  Image<eWrite, eAccessRandom> dst;

param:
  float padding;
  float left_margin;
  float tolerance;
  bool antialias;
  bool draw_axes;
  float4 grid_color;

local:
  float outsize;
  float offset;

  void init() {
    // calculate output width and height and offset based on padding
    outsize = float(dst.bounds.height()/padding);
    // xy offset for margin on lower left corner
    offset = dst.bounds.height()*left_margin;
  }

  float gaussian(float d, float a, float expv) {
    return max(0.0f, exp(-a*d*d)-expv);
  }

  float gaussian_filter(float x, float y, float r) {
    // return gaussian weighted distance from origin (0, 0)
    // given coordinate (x, y) and radius r
    float a = 1.5f; // rate falloff
    float expv = exp(-a*r*r);
    return gaussian(x, a, expv) * gaussian(y, a, expv);
  }

  void write_aa(float x, float y, float4 rgb) {
    // skip black pixels
    if (rgb.x == 0.0f && rgb.y == 0.0f && rgb.z == 0.0f) return;
    
    // size of pixel neighborhood = n*2+1 by n*2+1
    int n = 2;

    // center of neighborhood
    int u0 = round(x);
    int v0 = round(y);

    // skip if center pixel weight is greater than tolerance
    if ( dst.bounds.inside(u0, v0)) {
      if (dst(u0, v0, 3) >= tolerance) return;
    }

    // loop over neighborhood
    for (int j = -n; j <= n; j++) {
      int v = v0 + j;
      for (int i = -n; i <= n; i++) {
        int u = u0 + i;
        if ( dst.bounds.inside(u, v)) {
          // get filter weight for coord (u,v)
          float w = gaussian_filter(u-x, v-y, float(n));
          float4 c0 = dst(u, v); // existing color

          // merge current color sample over existing color sample
          for (int k=0; k<3; k++) {
            dst(u, v, k) = rgb[k]*w+c0[k]*(1-w); 
          }

          // merge current weight over existing weight
          float w0 = dst(u, v, 3);
          dst(u, v, 3) = w+w0*(1-w);
        }
      }
    }
  }

  void draw_grid() {
    // grid width in pixels. expresses a 0 to 1 range in CIE xy
    float grid_width = 1.0f * outsize + offset;
    // draw grid lines
    float i = offset;
    while (i <= grid_width && i > 0.0f) {
      write_aa(offset, i, grid_color);
      write_aa(i, offset, grid_color);
      i += 1.0;
    }
    // cross-hatching interval in pixels
    float hatch_interval = (grid_width - offset) * 0.1f;
    // cross-hatch length in pixels
    float hatch_width = outsize * 0.01f;
    i = offset;
    while (i <= grid_width) {
      i += hatch_interval;
      float j = 0.0;
      while (j <= hatch_width/2) {
        write_aa(offset+j, i, grid_color);
        write_aa(offset-j, i, grid_color);
        write_aa(i, offset+j, grid_color);
        write_aa(i, offset-j, grid_color);
        j += 1.0;
      }
    }
  }

  void process(int2 pos) {
    float4 rgba = col(pos.x, pos.y);
    
    // Get CIE xy position from Yxy input for current pixel
    float2 xy = float2(Yxy(pos.x, pos.y, 1), Yxy(pos.x, pos.y, 2));
    
    // Find output pixel coordinate for this CIE xy pixel value
    float2 out_coord = float2(xy.x * outsize + offset, xy.y * outsize + offset);

    // For each RGB component, write value from color input to output coordinate
    if (antialias) {
      write_aa(out_coord.x, out_coord.y, rgba);
    } else {
      // For each RGB component, write value from color input to output coordinate
      int2 p = int2(round(out_coord.x), round(out_coord.y));
      if (dst.bounds.inside(p.x, p.y)) {
        for (int k=0; k<3; k++) {
          dst(p.x, p.y, k) = col(pos.x, pos.y, k);
        }
        dst(p.x, p.y, 3) = 1.0f;
      }
    }

    // draw CIExy coordinate system axes
    if (draw_axes && pos.x == 0 && pos.y == 0) {
      draw_grid();
    }
  }
};