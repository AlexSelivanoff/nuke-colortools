kernel PlotWaveform : public ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessRandom, eEdgeClamped> src;
  Image<eWrite, eAccessRandom> dst;

  param:
    float max_value;
    float min_value;
    float tolerance;
    float mult;
    float log_min;
    float log_max;
    bool enable_log_transform;
    bool antialias;
    bool draw_lines;
    float4 lines_color;

  local:
    float yscale;

  void init() {
    yscale = dst.bounds.height() / max_value;
  }

  float gaussian(float d, float a, float expv) {
    return max(0.0f, exp(-a*d*d)-expv);
  }

  float gaussian_filter(float x, float y, float r) {
    // return gaussian weighted distance from origin (0, 0)
    // given coordinate (x, y) and radius r
    float a = 1.5f; // rate falloff
    float expv = exp(-a*r*r);
    return gaussian(x, a, expv) * gaussian(y, a, expv);
  }

  void write(float x, float y, int k, float c) {
    // Write cubic antialiased pixel value c in channel k at continuous float position x, y
    int n = 2;
    int u0 = round(x);
    int v0 = round(y);
    // skip if center pixel weight is greater than tolerance
    if ( dst.bounds.inside(u0, v0)) {
      if (dst(u0, v0, 3) >= tolerance) return;
    }
    // loop over neighborhood
    for (int j = -n; j <= n; j++) {
      int v = v0 + j;
      for (int i = -n; i <= n; i++) {
        int u = u0 + i;
        if ( dst.bounds.inside(u, v)) {
          // get filter weight for coord (u,v)
          float w = gaussian_filter(u-x, v-y, float(n));
          float c0 = dst(u, v, k); // existing color
          // merge current color sample over existing color sample
          dst(u, v, k) = c*w*mult+c0;
          // merge current weight over existing weight
          float w0 = dst(u, v, 3);
          dst(u, v, 3) = w+w0*(1-w);
        }
      }
    }
  }

  float log_transform(float x) {
    return x > 0.0f ? (log( x / 0.18f)/log(2.0f) - log_min) / (log_max - log_min) : x;
  }

  void process(int2 pos) {
    float4 source = src(pos.x, pos.y);
    if (enable_log_transform) {
      for (int k = 0; k < 3; k++){
        source[k] = log_transform(source[k]);
      }
    }
    float4 source_scaled = (source - min_value) * yscale;
    if (antialias) {
      for (int k = 0; k < 3; k++){
        write(pos.x, source_scaled[k], k, source[k]);
      }
    } else {
      for (int k = 0; k < 3; k++){
        if ( dst.bounds.inside(pos.x, source_scaled[k])) {
          dst(pos.x, source_scaled[k], k) = source[k]*mult + dst(pos.x, source_scaled[k], k);
          dst(pos.x, source_scaled[k], 3) = 1.0f;
        }
      }
    }
    if (draw_lines) {
      if (pos.x > 0 && pos.y > 0) return; // only draw the lines once
      for (int i = 0; i < 50; i++) {
        float val = i;
        if (enable_log_transform) val = log_transform(i);
        for (int k = 0; k < 3; k++) {
          write(pos.x, (val - min_value)*yscale, k, lines_color[k]);
        }
      }
    }
  }
};