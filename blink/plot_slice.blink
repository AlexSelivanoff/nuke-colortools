kernel PlotSlice : public ImageComputationKernel<ePixelWise>
{
  Image<eRead, eAccessRandom, eEdgeClamped> src;
  Image<eWrite, eAccessRandom> dst;

  param:
    float color;
    float max_val;
    float min_val;
    bool draw_lines;
    float tolerance;
    float3 lines_color;

  float gaussian(float d, float a, float expv) {
    return max(0.0f, exp(-a*d*d)-expv);
  }

  float gaussian_filter(float x, float y, float r) {
    // return gaussian weighted distance from origin (0, 0)
    // given coordinate (x, y) and radius r
    float a = 1.5f; // rate falloff
    float expv = exp(-a*r*r);
    return gaussian(x, a, expv) * gaussian(y, a, expv);
  }

  void write(float x, float y, int k, float c) {
    int n = 2;
    int u0 = round(x);
    int v0 = round(y);
    // skip if center pixel weight is greater than tolerance
    // if ( dst.bounds.inside(u0, v0)) {
    //   if (dst(u0, v0, 3) >= tolerance) return;
    // }
    // loop over neighborhood
    for (int j = -n; j <= n; j++) {
      int v = v0 + j;
      for (int i = -n; i <= n; i++) {
        int u = u0 + i;
        if ( dst.bounds.inside(u, v)) {
          // get filter weight for coord (u,v)
          float w = gaussian_filter(u-x, v-y, float(n));
          float c0 = dst(u, v, k); // existing color
          float w0 = dst(u, v, 3); // existing alpha
          // merge current color sample over existing color sample
          dst(u, v, k) = c*w+c0*(1-w);
          // merge current weight over existing weight
          dst(u, v, 3) = w+w0*(1-w);
        }
      }
    }
  }

  float scale(float x) {
    return (x*dst.bounds.height())/(max_val)-(min_val*dst.bounds.height());
  }

  void process(int2 pos) {
    if (pos.y == 0) {
      if (draw_lines) {
        for (int i = 0; i < 10; i++) {
          for (int k = 0; k < 3; k++) {
            write(pos.x, scale(i), k, lines_color[k]);
          }
        }
      }
      float4 source = src(pos.x, pos.y);
      for (int i = 0; i < 3; i++){
        write(pos.x, scale(source[i]), i, color);
      }
    }
  }
};